npm install --save-dev @babel/core @babel/preset-env @babel/preset-react babel-loader

--INSTALACION DE WEB BACK
npm install webpack webpack-cli html-webpack-plugin html-loader  --save-dev


--Instalación de Webpack Dev Server:
npm install --save-dev webpack-dev-server
npm install -D webpack-dev-server

--Instalación de Sass:
npm install --save-dev mini-css-extract-plugin css-loader node-sass sass-loader

--Instalación de ESLint:
npm install --save-dev eslint babel-eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-react eslint-plugin-jsx-a11y



--Instalar paquete para Webpack
npm install file-loader --save-dev

--Instalación de JSON Server:
sudo npm install json-server -g
```

Recuerda que en Windows debes correr tu terminal de comandos en modo administrador.

Ejecutar el servidor de JSON Server:

```bash
json-server archivoParaTuAPI.json

----Logré correr el FakeAPI en Windows 10 con
npx json-server --watch initialState.json

--Instalación de PropTypes:
npm install --save prop-types


--------------------------CURSO ROUTER-REDUX----------------------------------------
Si estás empezando la escuela de JavaScript desde este curso deberás crear una copia del repositorio de Platzi Video:

git clone https://github.com/platzi/PlatziVideo.git
Una vez tienes listo el repositorio vas a crear una nueva rama para trabajar en ella a lo largo del curso:

git checkout -b feature/router-redux
Ya que nos encontramos dentro de la rama vamos a instalar React Router, la librería que nos va a permitir manejar rutas dentro de nuestra aplicación:

npm install react-router-dom --save

--------------------------------
Atributos para los Route Objectos:

path: la ruta en la que se renderizará el componente en forma de cadena de texto
exact: un booleano para definir si queremos que la ruta tiene o no que ser exacta 
para renderizar un componente. Eg: /index !== /index/all.
strict: un booleano para definir si queremos que el último slash sea tomado en 
 para renderizar un componente. Eg: /index !== /index/.
sensitive: un booleano para definir si queremos distinguir entre minúsculas y
 mayúsculas, y tomar esto en cuenta para renderizar un componente. Eg: /index
  !== /Index
component: recibe un componente a renderizar. Crea un nuevo elemento de React
 cada vez. Esto causa que el componente se monte y desmonte cada vez (no actualiza).
render: recibe un método que retorna un componente. A diferencia de component
 no remonta el componente.


 -----------------REDUX
Redux es una librería escrita en JavaScript, basada en la arquitectura Flux y 
creada por Dan Abramov, se basa en 3 principios fundamentales:

Solamente hay una fuente de la verdad.
El estado es de solo lectura.
Solamente podemos utilizar funciones puras.
Nuestra UI va a activar una action, esta action va a ejecutar un reducer para 
modificar la información del store, y al actualizarse el store la UI se va a 
modificar.

-----Vamos a instalar las dependencias para poder trabajar con Redux:
npm install redux react-redux --save

Dentro de nuestro proyecto vamos a crear una carpeta para nuestros actions y otra 
para los reducers que utilizaremos en Redux.

El paquete react-redux nos proporciona un Provider para poder encapsular nuestros 
componentes por medio de un connect para poder transmitir la información que 
necesitemos del store a cada componente.

Provider:
Recuerden que se tiene que encapsular nuestra aplicación dentro de un provider, 
porque nada fuera del provider podrá acceder al store
.
El <Provider /> hace que la store de Redux esté disponible para cualquier 
componente anidado que se haya incluido en la función connect().
.
Dado que cualquier componente React en una aplicación React Redux se puede 
conectar, la mayoría de las aplicaciones mostrarán un <Provider> 'en el nivel 
superior, con el árbol de componentes completo de la aplicación dentro de él. . 
Normalmente, no puede usar un componente conectado a menos que esté anidado dentro 
de un<Provider>`.

El flag -S es lo mismo que --save esto guarda para Producción
El flag -D es lo mismo que --save-dev esto guarda para Desarrollo

-----------otra clase de redux
Para crear un Store necesitamos llamar a la función createStore del paquete de redux pasándole los parámetros del reducer y initialState.

Para conectar un componente a Redux vamos a necesitar importar connect de react-redux, connect va a aceptar dos parámetros:

mapStateToProps: es una función que le va a indicar al provider qué información necesitamos del store.
mapDispatchToProps: es un objeto con las distintas funciones para ejecutar una action en Redux.


Esta clase se me complico mucho, por eso les dejo algunos principios de redux que me ayudaron entender mejor,

*Esta basado en el patrón de diseño Flux

*Toda la data de la aplicación, se encuentra en una estructura previamente definida.

*Toda la informción se encontrará almacenada en un único lugar llamado STORE.

*El STORE jamas se modifica de forma directa.

*Interacciones de usuario y/o código, dispara acciones que describen qué sucedió

*El valor actual de la información de la aplicación se llama - State

*Un nuevo estado es creado, en base a la combinanción del viejo estado y una acción, por una función llamada Reducer.
Mas información la pueden encontrar en https://es.redux.js.org/


-----------------Creando un Servicio para Gravata
Muchas veces la mejor opción no es descargar un paquete de npm ya que podemos ver la documentación, entender cómo funciona y nosotros implementar el código necesario para nuestro caso, ya que instalar todo el paquete puede volver más pesado nuestro proyecto.

Para nuestro servicio que llamará a Gravatar vamos a crear la carpeta utils y dentro añadir el archivo gravatar.js.

npm install md5 --





Como sugerencia, yo prefiero usar Formik con Yup para formularios, y ya si es necesario mando un formValues a redux …